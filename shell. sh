# 1. shell script to check if the given input is a directory and display its contents in linux command.

#!/bin/bash

# Check if the user provided an argument
if [ $# -eq 0 ]; then
    echo "Please provide a directory path"
    exit 1
fi

# Check if the provided path is a directory
if [ -d "$1" ]; then
    echo "Contents of $1:"
    ls -l "$1"
else
    echo "$1 is not a directory"
fi


#2. shell script to check if the given inputs are files and copy the contents of one file to another file.

#!/bin/bash

# Prompt the user to enter the source file
read -p "Enter the source file path: " src

# Check if the source file exists and is a file
if [ ! -f "$src" ]; then
    echo "Error: '$src' is not a valid file."
    exit 1
fi

# Prompt the user to enter the destination file
read -p "Enter the destination file path: " dest

# Check if the destination file exists
if [ ! -f "$dest" ]; then
    echo "Warning: '$dest' does not exist. It will be created."
fi

#3. Copy contents from source to destination
cp "$src" "$dest"

echo "Contents of '$src' have been copied to '$dest'."


#Shell Script to Execute Basic Commands Using case Construct

#!/bin/bash

# Display menu options
echo "Select an option:"
echo "1. Display current date and time"
echo "2. List files in the current directory"
echo "3. Show current working directory"
echo "4. Check system uptime"
echo "5. Exit"

# Read user choice
read -p "Enter your choice (1-5): " choice

# Use case construct to handle different options
case $choice in
    1)
        echo "Current Date and Time: $(date)"
        ;;
    2)
        echo "Files in the current directory:"
        ls
        ;;
    3)
        echo "Current Working Directory: $(pwd)"
        ;;
    4)
        echo "System Uptime: $(uptime)"
        ;;
    5)
        echo "Exiting the script."
        exit 0
        ;;
    *)
        echo "Invalid choice! Please enter a number between 1 and 5."
        ;;
esac



#4. Shell Script to Find the Largest File from a Given List

#!/bin/bash

# Check if at least one file is provided
if [ $# -eq 0 ]; then
    echo "Usage: $0 file1 file2 file3 ..."
    exit 1
fi

max_size=0
largest_file=""

# Iterate through all provided files
for file in "$@"; do
    if [ -f "$file" ]; then
        size=$(stat -c%s "$file")  # Get file size in bytes
        if [ $size -gt $max_size ]; then
            max_size=$size
            largest_file=$file
        fi
    else
        echo "Warning: '$file' is not a valid file, skipping..."
    fi
done

# Display the largest file
if [ -n "$largest_file" ]; then
    echo "The largest file is: $largest_file ($max_size bytes)"
else
    echo "No valid files were provided."
fi
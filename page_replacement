𝙁𝙄𝙁𝙊:

#include <stdio.h>

int main() {
    int frames[10], pages[30], n, f, i, j, k, flag = 0, count = 0;

    printf("Enter number of pages: ");
    scanf("%d", &n);
    printf("Enter the page reference string: ");
    for (i = 0; i < n; i++)
        scanf("%d", &pages[i]);

    printf("Enter number of frames: ");
    scanf("%d", &f);

    for (i = 0; i < f; i++)
        frames[i] = -1;

    j = 0;
    printf("\nFIFO Page Replacement:\n");
    for (i = 0; i < n; i++) {
        flag = 0;
        for (k = 0; k < f; k++) {
            if (frames[k] == pages[i]) {
                flag = 1;
                break;
            }
        }

        if (!flag) {
            frames[j] = pages[i];
            j = (j + 1) % f;
            count++;
        }

        for (k = 0; k < f; k++)
            printf("%d ", frames[k]);
        printf("\n");
    }

    printf("Page Faults = %d\n", count);
    return 0;
}

#𝙞𝙣𝙘𝙡𝙪𝙙𝙚 <𝙨𝙩𝙙𝙞𝙤.𝙝>

𝙞𝙣𝙩 𝙨𝙚𝙖𝙧𝙘𝙝(𝙞𝙣𝙩 𝙠𝙚𝙮, 𝙞𝙣𝙩 𝙛𝙧𝙖𝙢𝙚[], 𝙞𝙣𝙩 𝙛) {
    𝙛𝙤𝙧 (𝙞𝙣𝙩 𝙞 = 0; 𝙞 < 𝙛; 𝙞++) {
        𝙞𝙛 (𝙛𝙧𝙖𝙢𝙚[𝙞] == 𝙠𝙚𝙮)
            𝙧𝙚𝙩𝙪𝙧𝙣 1;
    }
    𝙧𝙚𝙩𝙪𝙧𝙣 0;
}


𝙊𝙋𝙏𝙄𝙈𝘼𝙇:

𝙞𝙣𝙩 𝙥𝙧𝙚𝙙𝙞𝙘𝙩(𝙞𝙣𝙩 𝙥𝙖𝙜𝙚𝙨[], 𝙞𝙣𝙩 𝙛𝙧𝙖𝙢𝙚[], 𝙞𝙣𝙩 𝙣, 𝙞𝙣𝙩 𝙞𝙣𝙙𝙚𝙭, 𝙞𝙣𝙩 𝙛) {
    𝙞𝙣𝙩 𝙧𝙚𝙨 = -1, 𝙛𝙖𝙧𝙩𝙝𝙚𝙨𝙩 = 𝙞𝙣𝙙𝙚𝙭;
    𝙛𝙤𝙧 (𝙞𝙣𝙩 𝙞 = 0; 𝙞 < 𝙛; 𝙞++) {
        𝙞𝙣𝙩 𝙟;
        𝙛𝙤𝙧 (𝙟 = 𝙞𝙣𝙙𝙚𝙭; 𝙟 < 𝙣; 𝙟++) {
            𝙞𝙛 (𝙛𝙧𝙖𝙢𝙚[𝙞] == 𝙥𝙖𝙜𝙚𝙨[𝙟]) {
                𝙞𝙛 (𝙟 > 𝙛𝙖𝙧𝙩𝙝𝙚𝙨𝙩) {
                    𝙛𝙖𝙧𝙩𝙝𝙚𝙨𝙩 = 𝙟;
                    𝙧𝙚𝙨 = 𝙞;
                }
                𝙗𝙧𝙚𝙖𝙠;
            }
        }
        𝙞𝙛 (𝙟 == 𝙣)
            𝙧𝙚𝙩𝙪𝙧𝙣 𝙞;
    }
    𝙧𝙚𝙩𝙪𝙧𝙣 (𝙧𝙚𝙨 == -1) ? 0 : 𝙧𝙚𝙨;
}

𝙞𝙣𝙩 𝙢𝙖𝙞𝙣() {
    𝙞𝙣𝙩 𝙣, 𝙛;
    𝙥𝙧𝙞𝙣𝙩𝙛("𝙀𝙣𝙩𝙚𝙧 𝙣𝙪𝙢𝙗𝙚𝙧 𝙤𝙛 𝙥𝙖𝙜𝙚𝙨: ");
    𝙨𝙘𝙖𝙣𝙛("%𝙙", &𝙣);
    𝙞𝙣𝙩 𝙥𝙖𝙜𝙚𝙨[𝙣];
    𝙥𝙧𝙞𝙣𝙩𝙛("𝙀𝙣𝙩𝙚𝙧 𝙩𝙝𝙚 𝙥𝙖𝙜𝙚 𝙧𝙚𝙛𝙚𝙧𝙚𝙣𝙘𝙚 𝙨𝙩𝙧𝙞𝙣𝙜: ");
    𝙛𝙤𝙧 (𝙞𝙣𝙩 𝙞 = 0; 𝙞 < 𝙣; 𝙞++)
        𝙨𝙘𝙖𝙣𝙛("%𝙙", &𝙥𝙖𝙜𝙚𝙨[𝙞]);

    𝙥𝙧𝙞𝙣𝙩𝙛("𝙀𝙣𝙩𝙚𝙧 𝙣𝙪𝙢𝙗𝙚𝙧 𝙤𝙛 𝙛𝙧𝙖𝙢𝙚𝙨: ");
    𝙨𝙘𝙖𝙣𝙛("%𝙙", &𝙛);
    𝙞𝙣𝙩 𝙛𝙧𝙖𝙢𝙚[𝙛];
    𝙞𝙣𝙩 𝙘𝙤𝙪𝙣𝙩 = 0, 𝙛𝙞𝙡𝙡𝙚𝙙 = 0;

    𝙛𝙤𝙧 (𝙞𝙣𝙩 𝙞 = 0; 𝙞 < 𝙛; 𝙞++)
        𝙛𝙧𝙖𝙢𝙚[𝙞] = -1;

    𝙥𝙧𝙞𝙣𝙩𝙛("\𝙣𝙊𝙥𝙩𝙞𝙢𝙖𝙡 𝙋𝙖𝙜𝙚 𝙍𝙚𝙥𝙡𝙖𝙘𝙚𝙢𝙚𝙣𝙩:\𝙣");
    𝙛𝙤𝙧 (𝙞𝙣𝙩 𝙞 = 0; 𝙞 < 𝙣; 𝙞++) {
        𝙞𝙛 (𝙨𝙚𝙖𝙧𝙘𝙝(𝙥𝙖𝙜𝙚𝙨[𝙞], 𝙛𝙧𝙖𝙢𝙚, 𝙛)) {
            // 𝙖𝙡𝙧𝙚𝙖𝙙𝙮 𝙞𝙣 𝙛𝙧𝙖𝙢𝙚
        } 𝙚𝙡𝙨𝙚 𝙞𝙛 (𝙛𝙞𝙡𝙡𝙚𝙙 < 𝙛) {
            𝙛𝙧𝙖𝙢𝙚[𝙛𝙞𝙡𝙡𝙚𝙙++] = 𝙥𝙖𝙜𝙚𝙨[𝙞];
            𝙘𝙤𝙪𝙣𝙩++;
        } 𝙚𝙡𝙨𝙚 {
            𝙞𝙣𝙩 𝙟 = 𝙥𝙧𝙚𝙙𝙞𝙘𝙩(𝙥𝙖𝙜𝙚𝙨, 𝙛𝙧𝙖𝙢𝙚, 𝙣, 𝙞 + 1, 𝙛);
            𝙛𝙧𝙖𝙢𝙚[𝙟] = 𝙥𝙖𝙜𝙚𝙨[𝙞];
            𝙘𝙤𝙪𝙣𝙩++;
        }

        𝙛𝙤𝙧 (𝙞𝙣𝙩 𝙠 = 0; 𝙠 < 𝙛; 𝙠++)
            𝙥𝙧𝙞𝙣𝙩𝙛("%𝙙 ", 𝙛𝙧𝙖𝙢𝙚[𝙠]);
        𝙥𝙧𝙞𝙣𝙩𝙛("\𝙣");
    }

    𝙥𝙧𝙞𝙣𝙩𝙛("𝙋𝙖𝙜𝙚 𝙁𝙖𝙪𝙡𝙩𝙨 = %𝙙\𝙣", 𝙘𝙤𝙪𝙣𝙩);
    𝙧𝙚𝙩𝙪𝙧𝙣 0;
}




𝙇𝙍𝙐:

#include <stdio.h>

int findLRU(int time[], int n) {
    int i, minimum = time[0], pos = 0;

    for (i = 1; i < n; ++i) {
        if (time[i] < minimum) {
            minimum = time[i];
            pos = i;
        }
    }

    return pos;
}

int main() {
    int frames[10], pages[30], counter[10], time[10];
    int n, f, i, j, pos, count = 0, flag1, flag2;

    printf("Enter number of pages: ");
    scanf("%d", &n);
    printf("Enter the page reference string: ");
    for (i = 0; i < n; ++i)
        scanf("%d", &pages[i]);

    printf("Enter number of frames: ");
    scanf("%d", &f);

    for (i = 0; i < f; ++i) {
        frames[i] = -1;
        time[i] = 0;
    }

    printf("\nLRU Page Replacement:\n");
    for (i = 0, j = 0; i < n; ++i) {
        flag1 = flag2 = 0;

        for (j = 0; j < f; ++j) {
            if (frames[j] == pages[i]) {
                counter[j] = i;
                flag1 = flag2 = 1;
                break;
            }
        }

        if (flag1 == 0) {
            for (j = 0; j < f; ++j) {
                if (frames[j] == -1) {
                    frames[j] = pages[i];
                    counter[j] = i;
                    flag2 = 1;
                    count++;
                    break;
                }
            }
        }

        if (flag2 == 0) {
            pos = findLRU(counter, f);
            frames[pos] = pages[i];
            counter[pos] = i;
            count++;
        }

        for (j = 0; j < f; ++j)
            printf("%d ", frames[j]);
        printf("\n");
    }

    printf("Page Faults = %d\n", count);
    return 0;
}